---
layout: post
title:  "DML Basics"
number: 2
---

# DML Basics {#dml-basics}
The DML is where most of the action happens in SQL. It's how you store, access, and analyze data. There's a lot going on over all, and we might end up jumping around a little bit. We'll try to cover as much as we can to at least give you a starting point in working with SQL DML statements.

## Creating Tables, again {#create-tables-again}
Before we begin, we need to bring our database to a clean slate based on the previous [intro to DDL]({{ site.baseurl }}/{% post_url 2016-02-29-01-intro-to-ddl %}).

So start the database in a Terminal window:

{% highlight shell %}
$ sqlite3 mammoth-2.db
{% endhighlight %}

And then execute these statements using the venerable Copy & Paste approach:

{% highlight sql %}
CREATE TABLE users (
    id integer primary key,
    email_address varchar not null,
    first_name varchar,
    last_name varchar,
    is_admin boolean not null default false
);

CREATE TABLE products (
    id integer primary key,
    name varchar not null,
    price decimal(5, 2) not null
);

CREATE TABLE orders (
    id integer primary key,
    user_id integer not null,
    placed_at timestamp not null default current_timestamp,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE order_products (
    id integer primary key,
    order_id integer not null,
    product_id integer not null,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);
{% endhighlight %}

Awesome, let's get to work.

## Storing Data {#storing-data}
Before we can start analyzing data, we've got to find some data to analyze.  Here's some seed data for the products table:

{% highlight sql %}
INSERT INTO
    products (name, price)
VALUES
    ('Daily Face Wash',   7.00),
    ('Truman Set',        15.00),
    ('Razor Blades',      16.00),
    ('Foaming Shave Gel', 6.00);
{% endhighlight %}

This probably looks pretty intuitive, but the syntax here is generally:

{% highlight sql %}
INSERT INTO
    table_name (column_name_1, column_name_2, ...)
VALUES
    (row1_column1_value, row1_column2_value, ...),
    (row2_column1_value, row2_column2_value, ...);
{% endhighlight %}

In the above, the line-breaks are purely for readability. You can safely put this all on one line and it's just as valid.

You might also notice that we didn't assign any value to the `id` column. Since `id` is our primary key, the database is
going to generate a unique number for each one that we insert.


## Querying Basics {#querying-basics}
So how can we tell that the insert statements actually worked? We're going to have to learn how to write queries.

Similar to the insert statement, the basic structure of the statement should look pretty intuitive. Here's a query to show all of the current entries in the products table:

{% highlight sql %}
SELECT id, name, price FROM products;
{% endhighlight %}

You should see something like this as your result:

![Select Products]({{ site.baseurl }}/assets/02/select-products.png)

That's right, but it's a little annoying that you have to correlate the columns from the `select` statement to the values on your own.

To turn on headers in the query output, enter the following command into the sqlite console:

{% highlight sql %}
.headers on
{% endhighlight %}

With that, you should see the following:

![Select with Headers]({{ site.baseurl }}/assets/02/headers-on.png)

If you want to select all columns for a given table, you can actually omit spelling all of them out and just use:

{% highlight sql %}
SELECT * FROM products;
{% endhighlight %}


### Adding more data
These inserts will add more data for us to play with.  Do Copy & Paste but also think about the statements.

{% highlight sql %}
INSERT INTO
    users (id, email_address, first_name, last_name, is_admin)
VALUES
    (1, 'jpetty@example.com', 'James', 'Petty', 1),
    (2, 'chris@example.com', 'Chris', 'Clouten', 1),
    (3, 'bigfoot@gmail.com', NULL, NULL, 0),
    (4, 'imissthe70s@example.com', 'Cher', NULL, 0);

INSERT INTO
    orders (id, user_id, placed_at)
VALUES
    (1, 2, '2015-12-04 06:02:30'),
    (2, 4, '2016-02-25 04:45:14'),
    (3, 3, '2016-02-24 04:12:05'),
    (4, 2, '2015-12-29 08:30:09'),
    (5, 3, '2015-12-20 20:26:32');

INSERT INTO
    order_products (id, order_id, product_id)
VALUES
    (1, 1, 4),
    (2, 2, 1),
    (3, 3, 3),
    (4, 4, 2),
    (5, 5, 4),
    (6, 1, 2),
    (7, 2, 4),
    (8, 3, 1);
{% endhighlight %}


### Finding prices
Let's continue with querying data.

How much does the Daily Face Wash cost?

{% highlight sql %}
SELECT price
FROM products
WHERE name = 'Daily Face Wash';
{% endhighlight %}

*Result:*
<pre>
 price
 7
</pre>

###  Which orders were placed last year?

The `WHERE` clause is very flexible.

{% highlight sql %}
SELECT id
FROM orders
WHERE placed_at < '2016-01-01';
{% endhighlight %}

*Result:*
<pre>
 id
 1
 4
 5
</pre>


## Querying "Aggregates" {#querying-aggregates}
While getting individual rows is fun, life gets more exciting when we start applying functions.

### Latest order
When was the latest order placed?
{% highlight sql %}
SELECT max(placed_at)
FROM orders;
{% endhighlight %}

This doesn't look too bad but we can name result columns:
{% highlight sql %}
SELECT max(placed_at) AS latest_order
FROM orders;
{% endhighlight %}

*Result:*
<pre>
 latest_order
 2016-02-25 04:45:14
</pre>

### How many orders were placed last year?

{% highlight sql %}
SELECT count(*) AS orders_last_year
FROM orders
WHERE placed_at < '2016-01-01';
{% endhighlight %}

*Result:*
<pre>
 orders_last_year
 3
</pre>

## Selecting Data Using Joins
We have different tables for the different entities of our e-commerce site: `orders`, `products`, `users`, and `order_products`.
The last table describes the products contained in each order.

### Finding orders by user
We need to combine, or join, the `orders` table and the `users` table to find out who placed an order.

{% highlight sql %}
SELECT orders.user_id, orders.placed_at, users.email_address, users.first_name, users.last_name
FROM orders, users
WHERE orders.user_id = users.id;
{% endhighlight %}

*Result:*
<pre>
 user_id|placed_at|email_address|first_name|last_name
 2|2015-12-04 06:02:30|chris@example.com|Chris|Clouten
 4|2016-02-25 04:45:14|imissthe70s@example.com|Cher|
 3|2016-02-24 04:12:05|bigfoot@gmail.com||
 2|2015-12-29 08:30:09|chris@example.com|Chris|Clouten
 3|2015-12-20 20:26:32|bigfoot@gmail.com||
</pre>

### Which orders were placed last year by users who are admins?
First, we'll switch to the more common way of writing joins using a `JOIN` keyword.  (Strictly speaking, it's an inner join,
but that's for another day.)

{% highlight sql %}
SELECT orders.user_id, orders.placed_at, users.email_address, users.first_name, users.last_name
FROM orders
JOIN users ON orders.user_id = users.id;
{% endhighlight %}

*Result:*
<pre>
 user_id|placed_at|email_address|first_name|last_name
 2|2015-12-04 06:02:30|chris@example.com|Chris|Clouten
 4|2016-02-25 04:45:14|imissthe70s@example.com|Cher|
 3|2016-02-24 04:12:05|bigfoot@gmail.com||
 2|2015-12-29 08:30:09|chris@example.com|Chris|Clouten
 3|2015-12-20 20:26:32|bigfoot@gmail.com||
</pre>

The job is now to assemble the query with all the predicates (the "if"s):

{% highlight sql %}
SELECT orders.user_id, orders.placed_at, users.email_address
FROM orders
JOIN users ON orders.user_id = users.id
WHERE orders.placed_at < '2016-01-01' AND users.is_admin;
{% endhighlight %}

*Result:*
<pre>
user_id|placed_at|email_address
2|2015-12-04 06:02:30|chris@example.com
2|2015-12-29 08:30:09|chris@example.com
</pre>

### What did Chris order?
This will look scary at first, but it's really just applying the same idea again and again...

{% highlight sql %}
SELECT orders.placed_at, users.email_address, products.name, products.price
FROM orders
JOIN users ON orders.user_id = users.id
JOIN order_products ON orders.id = order_products.order_id
JOIN products ON order_products.product_id = products.id
WHERE users.first_name = 'Chris'
ORDER BY orders.placed_at;
{% endhighlight %}

*Result:*
<pre>
placed_at|email_address|name|price
2015-12-04 06:02:30|chris@example.com|Foaming Shave Gel|6
2015-12-04 06:02:30|chris@example.com|Truman Set|15
2015-12-29 08:30:09|chris@example.com|Truman Set|15
</pre>

Question for you: How much did Chris spend on this order?


## Exercises for the Reader:

1. Add yourself to the database as a user
    - what happens if you add a user to the database and don't set a value for the `is_admin` column?
1. Create an order for yourself (note: the placed_at value will have to be passed in the format: 'YEAR-MM-DD HH:MM:SS')
1. Put some items in that order
