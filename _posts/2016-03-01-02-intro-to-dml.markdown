---
layout: post
title:  "DML Basics"
number: 2
---

# DML Basics {#dml-basics}
The DML is where most of the action happens in SQL. It's how you store, access, and analyze data. There's a lot going on over all, and we might end up jumping around a little bit. We'll try to cover as much as we can to at least give you a starting point in working with SQL DML statements.

## Storing Data {#storing-data}
Before we can start analyzing data, we've got to find some data to analyze. I've added a script that will seed your database with some values we're going to start working with.

Run that script using the read command below:

    sqlite> .read 02-dml-seed-data.sql

Let me know if you see an error message after running the above

If you look into that script you just ran, you'd see some SQL statements that look like this:

{% highlight sql %}
INSERT INTO
    products (name, price)
VALUES
    ('Daily Face Wash',   7.00),
    ('Truman Set',        15.00),
    ('Razor Blades',      16.00),
    ('Foaming Shave Gel', 6.00);
{% endhighlight %}

This probably looks pretty intuitive, but the syntax here is generally:

{% highlight sql %}
INSERT INTO 
    table_name (column_name_1, column_name_2, ...)
VALUES
    (row1_column1_value, row1_column2_value, ...),
    (row2_column1_value, row2_column2_value, ...);
{% endhighlight %}

In the above, the line-breaks are purely for readability. You can safely put this all on one line and it's just as valid.

You might also notice that we didn't assign any value to the `id` column. Since `id` is our primary key, the database is going to generate a unique number for each one that we insert.


## Querying Basics {#querying-basics}
So how can we tell that the insert statements actually worked? We're going to have to learn how to write queries.

Similar to the insert statement, the basic structure of the statement should look pretty intuitive. Here's a query to show all of the current entries in the products table:

{% highlight sql %}
SELECT id, name, price FROM products;
{% endhighlight %}

You should see something like this as your result:

![Select Products]({{ site.baseurl }}/assets/02/select-products.png)

That's right, but it's a little annoying that you have to correlate the columns from the `select` statement to the values on your own.

To turn on headers in the query output, enter the following command into the sqlite console:

    sqlite> .headers on

With that, you should see the following:

![Select with Headers]({{ site.baseurl }}/assets/02/headers-on.png)

If you want to select all columns for a given table, you can actually omit spelling all of them out and just use:

{% highlight sql %}
SELECT * FROM table_name;
{% endhighlight %}


## Exercises for the Reader:

1. Add yourself to the database as a user
    - what happens if you add a user to the database and don't set a value for the `is_admin` column?
1. Create an order for yourself (note: the placed_at value will have to be passed in the format: 'YEAR-MM-DD HH:MM:SS')
1. Put some items in that order


